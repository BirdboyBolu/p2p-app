# <TreeElement>:
#     canvas.before:
#         Color:
#             rgba: self.color_selected if self.is_selected else self.odd_color if self.odd else self.even_color
#         Rectangle:
#             pos: [self.parent.x, self.y] if self.parent else [0, 0]
#             size: [self.parent.width, self.height] if self.parent else [1, 1]
#         Color:
#             rgba: 1, 1, 1, int(not self.is_leaf)
#         Rectangle:
#             source: 'atlas://data/images/defaulttheme/tree_%s' % ('opened' if self.is_open else 'closed')
#             size: (self.height / (3. if dp(1) > 1 else 2.)) * 0.75, (self.height / (3. if dp(1) > 1 else 2.)) * 0.75
#             pos: self.x - dp(10), int(self.center_y - (self.height / (3. if dp(1) > 1 else 2.)) * .5)
#     canvas.after:
#         Color:
#             rgba: .5, .5, .5, .2
#         Line:
#             points: [self.parent.x, self.y, self.parent.right, self.y] if self.parent else []


<OptionValueTextInput>:
    size_hint: None, None
    width: dp(100)
    height: self.line_height + dp(4)
    pos_hint: {'right': 1, 'center_y': .5}
    padding: dp(4), dp(2)
    halign: 'left'
    valign: 'center'
    font_size: app.setting_small_font_size


<OptionValueIntInput>:
    input_filter: 'int'
    width: dp(80)


<OptionValueDiskSpaceInput>:
    width: dp(70)


<OptionValueSingleChoiceInput>:
    width: dp(60)


<OptionNameLabel>:
    size_hint_y: None
    fixed_height: app.setting_record_height
    pos_hint: {'left': 0, 'center_y': .5}
    halign: 'left'
    valign: 'top'
    padding: 0, 0
    text_size: self.width, None
    font_size: app.setting_normal_font_size


<OptionDescriptionLabel>:
    size_hint: 1, None
    height: self.texture_size[1]
    text_size: self.width, None
    halign: 'left'
    valign: 'top'
    padding: dp(15), dp(0)
    font_size: app.setting_small_font_size


<ParentElement>:
    size_hint_y: None
    fixed_height: app.setting_record_height
    pos_hint: {'left': 0}
    halign: 'left'
    text_size: self.width, None
    font_size: app.setting_normal_font_size
    on_press: self.item_clicked_callback(self.item_key, self)


<ServiceElement>:

    HorizontalLayout:
        size_hint: 1, None
        height: self.minimum_height

        Widget:
            size_hint: None, 1
            width: dp(8)

        CustomIcon:
            size_hint: None, None
            size: (dp(12), app.setting_record_height)
            pos_hint: {'right': 1, 'center_y': 0.5}
            font_size: '11sp'
            icon: 'circle'
            color: (.7, .7, .7, 1) if root.service_state != 'ON' else (.6, 1, .6, 1)
    
        OptionNameLabel:
            id: option_label
            text: '{}'.format(root.service_name)
            on_press: root.item_clicked_callback(root.item_key, root)


<BooleanElement>:

    HorizontalLayout:
        size_hint: 1, None
        height: self.minimum_height

        OptionNameLabel:
            id: option_label
            text: '{}'.format(root.option_name)
            on_press: root.item_clicked_callback(root.item_key, root)

		Widget:
			size_hint: None, 1
			width: dp(5)

        CheckBox:
            canvas.before:
                Color:
                    rgb: 0,0,0,1
                Rectangle:
                    pos: self.pos[0] + 6, self.pos[1] + 6
                    size: self.size[0] - 12, self.size[1] - 12
                Color:
                    rgb: 1,1,1,1
                Rectangle:
                    pos: self.pos[0] + 7, self.pos[1] + 7
                    size: self.size[0] - 14, self.size[1] - 14
			id: option_value_checkbox
            size_hint: None, None
            pos_hint: {'right': 1, 'center_y': 0.5}
            width: dp(24)
            height: dp(24)
            active: bool(root.option_value)
            on_active: root.value_modified_callback(root.item_key, self.active)

    OptionDescriptionLabel:
        text: '{}'.format(root.option_description)

	Widget:
		size_hint: 1, None
		height: dp(5)


<IntegerElement>:
    size_hint: 1, None
    height: self.minimum_height

    HorizontalLayout:
        size_hint: 1, None
        height: self.minimum_height

        OptionNameLabel:
            id: option_label
            text: '{}'.format(root.option_name)
            on_press: root.item_clicked_callback(root.item_key, root)

		Widget:
			size_hint: None, 1
			width: dp(5)

        OptionValueIntInput:
            id: option_value_input
            text: '{}'.format(root.option_value)
            on_focus: root.on_focus_changed()

        Widget:
            size_hint: None, 1
            width: dp(5)

    OptionDescriptionLabel:
        text: '{}'.format(root.option_description)

	Widget:
		size_hint: 1, None
		height: dp(5)


<DiskSpaceElement>:
    size_hint: 1, None
    height: self.minimum_height

    HorizontalLayout:
        size_hint: 1, None
        height: self.minimum_height

        OptionNameLabel:
            id: option_label
            text: '{}'.format(root.option_name)
            on_press: root.item_clicked_callback(root.item_key, root)

		Widget:
			size_hint: None, 1
			width: dp(5)

        OptionValueDiskSpaceInput:
            id: option_value_input
            text: '{}'.format(root.option_value)
            on_focus: root.on_focus_changed()

    OptionDescriptionLabel:
        text: '{}'.format(root.option_description)

	Widget:
		size_hint: 1, None
		height: dp(5)


<SingleChoiceElement>:
    size_hint: 1, None
    height: self.minimum_height

    HorizontalLayout:
        size_hint: 1, None
        height: self.minimum_height

        OptionNameLabel:
            id: option_label
            text: '{}'.format(root.option_name)
            on_press: root.item_clicked_callback(root.item_key, root)

		Widget:
			size_hint: None, 1
			width: dp(5)

        OptionValueSingleChoiceInput:
            id: option_value_input
            text: '{}'.format(root.option_value)
            on_focus: root.on_focus_changed()

    OptionDescriptionLabel:
        text: '{}'.format(root.option_description)

	Widget:
		size_hint: 1, None
		height: dp(5)


<TextElement>:
    size_hint: 1, None
    height: self.minimum_height

    HorizontalLayout:
        size_hint: 1, None
        height: self.minimum_height

        OptionNameLabel:
            id: option_label
            text: '{}'.format(root.option_name)
            on_press: root.item_clicked_callback(root.item_key, root)

		Widget:
			size_hint: None, 1
			width: dp(5)

        OptionValueTextInput:
            id: option_value_input
            text: '{}'.format(root.option_value)
            on_focus: root.on_focus_changed()

    OptionDescriptionLabel:
        text: '{}'.format(root.option_description)

	Widget:
		size_hint: 1, None
		height: dp(5)


<SettingsTreeView>:
    size_hint: 1, None
    height: self.minimum_height
    root_options: {'text': 'settings'}
    indent_start: dp(5)
    indent_level: dp(8)
    hide_root: True


<SettingsScreen>:

    ScrollView:
        id: scroll_view
        do_scroll_x: False

        VerticalLayout:
            id: settings_content
            pos_hint: {'top': 1}
            size_hint: 1, None
            height: self.minimum_height
            padding: dp(15)
            spacing: dp(5)

            SettingsStatusMessage:
                id: status_message_label
                size_hint: 1, None
                height: self.texture_size[1]
                text: ''

            SettingsTreeView
                id: settings_tree
